#!/usr/bin/env ruby

require 'githubchart'
require 'optparse'

# rubocop:disable Metrics/BlockLength
options = {}
render_type = 'svg'.freeze

OptionParser.new do |opts|
  opts.banner =
    "Usage: githubchart (-u username) (-t type) path/for/new/image\n"
  opts.banner << "Supported types: #{GithubChart.supported.join(' ')}"
  opts.on('-uUSER', '--user=USER', 'Specify GitHub user to graph') do |user|
    raise('The --user and --input flags are incompatible with each other.') if options.include? :input
    options[:user] = user
  end
  opts.on('-iFILE', '--input=FILE', 'Specify JSON file, - for stdin') do |input|
    raise('The --user and --input flags are incompatible with each other.') if options.include? :user
    if input.eql? '-'
      raise 'No data provided on stdin' if $stdin.tty?
      contents = $stdin.read
    else
      raise 'File does not exist' unless File.exist? input
      contents = File.read input
    end
    begin
      parsed = JSON.parse(contents)
    rescue StandardError => e
      raise "Unable to parse JSON data provided: #{e}"
    end
    options[:data] = GithubStats::Data.new(parsed)
  end
  opts.on('-cSCHEME', '--colors SCHEME', 'Pick a color scheme') do |scheme|
    is_good_scheme = GithubChart::COLOR_SCHEMES.include? scheme.to_sym
    raise('Unknown color scheme provided') unless is_good_scheme
    options[:colors] = scheme.to_sym
  end
  opts.on('-s', '--schemes', 'List known color schemes') do
    puts 'Color schemes:'
    GithubChart::COLOR_SCHEMES.each do |scheme, colors|
      puts "    #{scheme}: #{colors}"
    end
    exit
  end
  opts.on('-t TYPE', '--type TYPE', 'What type to render') do |type|
    raise('Unsupported render type') unless GithubChart.supported.include?(
      type.to_sym
    )
    render_type = type
  end
  opts.on_tail('-v', '--version', 'Show version') do
    puts GithubChart::VERSION
    exit
  end
end.parse!
# rubocop:enable Metrics/BlockLength

SVG_Path = ARGV.shift

Chart = GithubChart.new(options).render(render_type)

if SVG_Path.nil?
  puts Chart
else
  File.open(SVG_Path, 'w') { |file| file << Chart }
end
